src/main/resources/rules/
├── common.dsl
├── invoice.dsl
├── invoice.dslr
├── order.dsl
├── order.dslr


 // Process each *.dslr in this folder
                try (DirectoryStream<Path> files = Files.newDirectoryStream(folder, "*.dslr")) {
                    for (Path dslrFile : files) {
                        String baseName = dslrFile.getFileName().toString().replaceFirst("\\.dslr$", "");
                        Path dslFile = folder.resolve(baseName + ".dsl");

                        if (!Files.exists(dslFile)) {
                            System.out.println("⚠ No DSL file for: " + dslrFile);
                            continue;
                        }

                        // Merge DSLs
                        DSLTokenizedMappingFile mergedMapping = new DSLTokenizedMappingFile();
                        mergedMapping.parseAndLoad(Files.newBufferedReader(dslFile));
                        mergedMapping.getMapping().addAll(commonMapping.getMapping());

                        DefaultExpander expander = new DefaultExpander();
                        expander.addDSLMapping(mergedMapping.getMapping());

                        String drl = expander.expand(Files.newBufferedReader(dslrFile));

                        Path outputDir = outputBaseDir.resolve(folder.getFileName());
                        Files.createDirectories(outputDir);
                        Path outputFile = outputDir.resolve(baseName + ".drl");
                        Files.writeString(outputFile, drl);

                        System.out.println("✔ DRL generated: " + outputFile);
                    }
                }

<build>
  <plugins>
    <plugin>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>exec-maven-plugin</artifactId>
      <version>3.1.0</version>
      <executions>
        <execution>
          <id>generate-drls</id>
          <phase>generate-sources</phase>
          <goals>
            <goal>java</goal>
          </goals>
          <configuration>
            <mainClass>com.example.dslr.DSLRExpander</mainClass>
            <method>generateAll</method>
          </configuration>
        </execution>
      </executions>
    </plugin>
  </plugins>
</build>
